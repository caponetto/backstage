{
  "id": "swf-ansible-job-long",
  "version": "1.0",
  "specVersion": "0.8",
  "name": "[WF] Ansible Job Long Running",
  "description": "[WF] Launch an Ansible Job within Ansible Automation Platform",
  "dataInputSchema": "schemas/swf-ansible-job__main_schema.json",
  "functions": [
    {
      "name": "runActionTemplateFetch",
      "operation": "specs/actions-openapi.json#fetch:template"
    },
    {
      "name": "runActionGitHubRepoPush",
      "operation": "specs/actions-openapi.json#github:repo:push"
    },
    {
      "name": "runActionCatalogRegister",
      "operation": "specs/actions-openapi.json#catalog:register"
    },
    {
      "name": "jiraCreateIssue",
      "operation": "specs/jira-openapi.json#createIssue"
    },
    {
      "name": "print",
      "type": "custom",
      "operation": "sysout"
    }
  ],
  "events": [
    {
      "name": "callbackEvent",
      "type": "jira_webhook_callback",
      "source": "jira"
    }
  ],
  "errors": [
    {
      "name": "Error",
      "code": "java.lang.RuntimeException"
    }
  ],
  "start": "Generating the Ansible Job component",
  "states": [
    {
      "name": "Generating the Ansible Job component",
      "type": "operation",
      "actionMode": "sequential",
      "actions": [
        {
          "name": "Run Template Fetch Action",
          "functionRef": {
            "refName": "runActionTemplateFetch",
            "arguments": {
              "id": "$WORKFLOW.instanceId",
              "url": "https://github.com/manstis/janus-software-templates/tree/main/scaffolder-templates/ansible-job/skeleton",
              "targetPath": "argo/ansibleJobs/",
              "values": {
                "component_id": ".component_id",
                "jobTemplate": ".jobTemplate",
                "name": ".component_id",
                "namespace": ".namespace",
                "connection_secret": ".connection_secret"
              }
            }
          },
          "actionDataFilter": {
            "toStateData": ".actionAnsibleJobResult"
          }
        }
      ],
      "compensatedBy": "Clean resources",
      "transition": "Generating the Catalog Info Component"
    },
    {
      "name": "Generating the Catalog Info Component",
      "type": "operation",
      "actionMode": "sequential",
      "actions": [
        {
          "functionRef": {
            "refName": "runActionTemplateFetch",
            "arguments": {
              "id": "$WORKFLOW.instanceId",
              "url": "https://github.com/manstis/janus-software-templates/tree/main/scaffolder-skeletons/catalog-info-skeleton/",
              "values": {
                "githubOrg": ".githubOrg",
                "repoName": ".repoName",
                "owner": ".owner",
                "applicationType": "api",
                "system": "system:default/podcast",
                "description": ".description"
              }
            },
            "actionDataFilter": {
              "toStateData": ".actionCatalogResult"
            }
          }
        }
      ],
      "compensatedBy": "Clean resources",
      "transition": "Publish to GitHub"
    },
    {
      "name": "Publish to GitHub",
      "type": "operation",
      "actionMode": "sequential",
      "actions": [
        {
          "functionRef": {
            "refName": "runActionGitHubRepoPush",
            "arguments": {
              "id": "$WORKFLOW.instanceId",
              "repoUrl": "\"github.com?owner=\" + .githubOrg + \"&repo=\" + .repoName",
              "defaultBranch": ".defaultBranch",
              "protectDefaultBranch": false,
              "protectEnforceAdmins": false
            }
          },
          "actionDataFilter": {
            "toStateData": ".actionPublishResult"
          }
        }
      ],
      "onErrors": [
        {
          "errorRef": "Error",
          "transition": "Handle Github Error"
        }
      ],
      "transition": "Register Catalog entry"
    },
    {
      "name": "Handle Github Error",
      "type": "operation",
      "actions": [
        {
          "name": "Handle Github Error",
          "functionRef": {
            "refName": "print",
            "arguments": {
              "message": "Error publishing to github"
            }
          }
        }
      ],
      "transition": "Open Jira issue"
    },
    {
      "name": "Open Jira issue",
      "type": "callback",
      "action": {
        "name": "callbackAction",
        "functionRef": {
          "refName": "jiraCreateIssue",
          "arguments": {
            "fields": {
              "assignee": {
                "name": ".jiraAssignee"
              },
              "description": "${`Create Github Repository: ` .repoName .repoUrl}",
              "id": "$WORKFLOW.instanceId",
              "repoUrl": "${.repoUrl}",
              "issuetype": {
                "id": "10001"
              },
              "labels": [
                "backstage-workflow"
              ],
              "project": {
                "id": "10000"
              },
              "reporter": {
                "name": ".jiraReporter"
              },
              "summary": "New Repository for Ansible project on Backstage",
              "customfield_10104": "testing custom field"
            }
          }
        },
        "actionDataFilter": {
          "toStateData": "."
        }
      },
      "eventRef": "callbackEvent",
      "compensatedBy": "Close Jira issue",
      "transition": "Check Repository Created"
    },
    {
      "name": "Check Repository Created",
      "type": "switch",
      "dataConditions": [
        {
          "condition": ".jiraEvent != null",
          "transition": "Publish to GitHub",
          "name": "created"
        },
        {
          "condition": ".jiraEvent = null",
          "name": "timeout",
          "end": {
            "compensate": true
          }
        }
      ]
    },
    {
      "name": "Register Catalog entry",
      "type": "operation",
      "actionMode": "sequential",
      "actions": [
        {
          "functionRef": {
            "refName": "runActionCatalogRegister",
            "arguments": {
              "id": "$WORKFLOW.instanceId",
              "repoContentsUrl": ".actionPublishResult.repoContentsUrl",
              "catalogInfoPath": "\"/catalog-info.yaml\""
            }
          },
          "actionDataFilter": {
            "toStateData": ".actionCatalogRegisterResult"
          }
        }
      ],
      "end": true
    },
    {
      "name": "Clean resources",
      "type": "operation",
      "actions": [
        {
          "name": "Clean resources",
          "functionRef": {
            "refName": "print",
            "arguments": {
              "message": "Cleaning resources"
            }
          }
        }
      ],
      "usedForCompensation": true
    },
    {
      "name": "Close Jira issue",
      "type": "operation",
      "actionMode": "sequential",
      "actions": [
        {
          "name": "callbackAction",
          "functionRef": {
            "refName": "jiraCreateIssue",
            "arguments": {
              "fields": {
                "assignee": {
                  "name": ".jiraAssignee"
                },
                "description": "${`Create Github Repository: ` .repoName .repoUrl}",
                "id": "$WORKFLOW.instanceId",
                "repoUrl": "${.repoUrl}",
                "issuetype": {
                  "id": "10001"
                },
                "labels": [
                  "backstage-workflow"
                ],
                "project": {
                  "id": "10000"
                },
                "reporter": {
                  "name": ".jiraReporter"
                },
                "summary": "New Repository for Ansible project on Backstage",
                "customfield_10104": "testing custom field",
                "customfield_workflowId": "$WORKFLOW.instanceId"
              }
            }
          }
        }
      ],
      "usedForCompensation": true
    }
  ]
}
